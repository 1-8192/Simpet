/**
 * The below is starter code generated by ChatGPT for the PetSim pet simulation. I have moved the classes over into
 * their own separate files for readability rather than rely on this one file to run the program. I also added a lot
 * more to the main function, as I wanted to include user input to create a user and desired pets.
 * The prompt was: "Please code an implementation for a pet simulation system that allows a user to create a pet
 * and take care of it throughout its simulated lifetime. using Java that implements inheritance,
 * downcasting, and polymorphism. Make sure the Pet class is abstract."

abstract class Pet {
    protected String name;
    protected int age;
    protected int health;
    protected int mood;

    public Pet(String name) {
        this.name = name;
        this.age = 0;
        this.health = 100;
        this.mood = 100;
    }

    public void play() {
        System.out.println(name + " is playing!");
        mood += 10;
    }

    public abstract void feed();

    public abstract void train(String trick);

    public void sleep() {
        System.out.println(name + " is sleeping!");
        mood += 20;
    }

    public void getOlder() {
        age += 1;
        health -= 10;
        if (health <= 0) {
            System.out.println(name + " has died!");
            System.exit(0);
        }
    }

    public String toString() {
        return "Name: " + name + ", Age: " + age + ", Health: " + health + ", Mood: " + mood;
    }
}

class Dog extends Pet {
    public Dog(String name) {
        super(name);
    }

    public void feed() {
        System.out.println(name + " is eating dog food.");
        mood += 5;
    }

    public void train(String trick) {
        System.out.println(name + " is learning to " + trick + ".");
        mood += 10;
    }
}

class Cat extends Pet {
    public Cat(String name) {
        super(name);
    }

    public void feed() {
        System.out.println(name + " is eating cat food.");
        mood += 5;
    }

    public void train(String trick) {
        System.out.println(name + " is ignoring you.");
        mood -= 5;
    }
}

public class Main {
    public static void main(String[] args) {
        Pet fido = new Dog("Fido");
        System.out.println("You have created a new dog named " + fido.name + ".");
        fido.feed();
        fido.play();
        fido.train("roll over");
        fido.sleep();
        fido.getOlder();
        System.out.println(fido.toString());

        Pet mittens = new Cat("Mittens");
        System.out.println("You have created a new cat named " + mittens.name + ".");
        mittens.feed();
        mittens.play();
        mittens.train("jump through hoop");
        mittens.sleep();
        mittens.getOlder();
        System.out.println(mittens.toString());

        // Downcasting example
        if (fido instanceof Dog) {
            Dog dogFido = (Dog) fido;
            dogFido.train("shake");
        }

        // Polymorphism example
        Pet[] pets = {fido, mittens};
        for (Pet pet : pets) {
            pet.feed();
            pet.play();
            pet.train("fetch");
            pet.sleep();
        }
    }
}

 * For the below I gave Chatgpt another prompt:
 * Using the above Java starter code, please write a Java program that simulates a pet's life.
 *
 * The program should
 * 1. As the user to input a user name and create a user instance.
 * 2. Ask the user to name pets they would want a select a type until they are satisfied with their pets. Those pets should be stored in an array variable in the user class.
 * 3. The program should print information onscreen related to the pets the user has.
 * 4. The program should ask the user which pet they want to interact with and how, and print information related to that onscreen.
 * 5. The user should be able to exit the program at any time by entering "exit".
 * 6. before closing the program should print out everything it has printed onscreen onto an output file named petReportcard.txt
 * 7. The program should feature an abstract pet class, inheritance, polymorphism, and upcasting or downcasting.
 *
 * Again I opted to copying the result over into a separate file for readability. This result was a little rough, so a
 * lot of format and syntax fixing needed to be done, but overall it was an impressive result.

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

    System.out.println("Welcome to the Pet Simulator!");
            System.out.print("Please enter your name: ");
    String userName = scanner.nextLine();
    User user = new User(userName);

    boolean running = true;
            while(running)

    {
        System.out.print("What kind of pet would you like to create? (Dog/Cat/Exit): ");
        String petType = scanner.nextLine();

        if (petType.equalsIgnoreCase("exit")) {
            running = false;
        } else if (petType.equalsIgnoreCase("dog")) {
            System.out.print("Please enter a name for your dog: ");
            String petName = scanner.nextLine();
            Dog dog = new Dog(petName);
            user.addPet(dog);
            System.out.println("You have created a new dog named " + petName + ".");
        } else if (petType.equalsIgnoreCase("cat")) {
            System.out.print("Please enter a name for your cat: ");
            String petName = scanner.nextLine();
            Cat cat = new Cat(petName);
            user.addPet(cat);
            System.out.println("You have created a new cat named " + petName + ".");
        } else {
            System.out.println("Invalid input. Please enter Dog, Cat, or Exit.");
        }
    }

    // Print information about the user's pets
            System.out.println("\nHere are your pets:");
            for(
    Pet pet :user.getPets())

    {
        System.out.println(pet.toString());
    }

    // Interact with pets
            while(true)

    {
        System.out.print("Which pet would you like to interact with? (Enter pet number or Exit): ");
        String input = scanner.nextLine();

        if (input.equalsIgnoreCase("exit")) {
            break;
        } else {
            try {
                int petIndex = Integer.parseInt(input) - 1;
                if (petIndex < 0 || petIndex >= user.getPets().size()) {
                    System.out.println("Invalid input. Please enter a valid pet number or Exit.");
                    continue;
                }

                Pet pet = user.getPets().get(petIndex);
                System.out.print("How would you like to interact with " + pet.getName() + "? (Feed/Play/Train/Sleep): ");
                String action = scanner.nextLine();

                if (action.equalsIgnoreCase("feed")) {
                    pet.feed();
                } else if (action.equalsIgnoreCase("play")) {
                    pet.play();
                } else if (action.equalsIgnoreCase("train")) {
                    System.out.print("What trick would you like to train " + pet.getName() + " to do? ");
                    String trick = scanner.nextLine();
                    pet.train(trick);
                } else if (action.equalsIgnoreCase("sleep")) {
                    pet.sleep();
                } else {
                    System.out.println("Invalid input. Please enter Feed, Play, Train, Sleep, or Exit.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid pet number or Exit.");
            }
        }
    }

    // Write pet report card to file
        try

    {
        FileWriter fileWriter = new FileWriter("petReportcard.txt");
        PrintWriter printWriter = new PrintWriter(fileWriter);

        for (Pet pet : user.getPets()) {
            printWriter.println(pet.toString());
        }

        printWriter.close();
        System.out.println("Pet report card has been saved to petReportcard.txt");
    } catch(
    IOException e)

    {
        System.out.println("An error occurred while writing to the file.");
        e.printStackTrace();
    }

    System
}

*/